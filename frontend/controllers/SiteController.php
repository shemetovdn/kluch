<?php
namespace frontend\controllers;

use backend\modules\news\models\News;
use backend\modules\testimonials\models\Testimonials;
use backend\modules\pages\models\Pages;
use backend\modules\seo\models\SEO;
use backend\modules\subscribe\models\Subscribe;
use backend\modules\request\models\Request;
use backend\modules\partners\models\Partners;
use backend\modules\rewards\models\Rewards;
use common\models\WbpActiveRecord;
use frontend\models\Contacts;
use frontend\models\OrderPropertyManagment;
use frontend\models\Callback;
use frontend\models\Orders;
use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use yii\helpers\Html;
use yii\web\NotFoundHttpException;
use backend\modules\adverts\models\Adverts;

use yii\helpers\Url;

class SiteController extends BaseController
{
    public $modelSubscribe;

    public function beforeAction($action)
    {
//        $this->modelSubscribe = new Subscribe(['scenario' => Subscribe::FRONTEND_SUBSCRIBE]);
//        $this->modelSubscribe->return = $_SERVER['REQUEST_URI'];

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {

        $month=Yii::$app->request->post('month',false);
        $year=Yii::$app->request->post('year',false);

        $model=Pages::findByHref('index')->one();
        SEO::setByModel($model);

        $news = new ActiveDataProvider([
            'query' => News::find()->where(['status'=>1])->orderBy('created_at DESC')->limit(3),
            'pagination' => false
        ]);
        $last_add = new ActiveDataProvider([
            'query' => Adverts::find()->where(['status'=>1,])->orderBy('date DESC')->limit(8),
            'pagination' => false
        ]);
        $exclusive = new ActiveDataProvider([
            'query' => Adverts::find()->where(['status'=>1, 'exclusive' => 1])->orderBy('date DESC')->limit(8),
            'pagination' => false
        ]);
        $revards = new ActiveDataProvider([
            'query' => Rewards::find()->where(['status'=>1])->orderBy('id'),
            'pagination' => false
        ]);


        // for googleMap
        $totaladverts_array = Adverts::getMarkers();
        // for googleMap END

        return $this->render('index', ['month'=>$month, 'year'=>$year,'exclusive'=>$exclusive, 'model'=>$model, 'news'=>$news, 'last_add'=>$last_add, 'revards'=>$revards, 'totaladverts'=>$totaladverts_array]);
    }

    public function actionMap(){
        return $this->renderAjax('map');
    }

    public function actionGenericPage($href)
    {
        $this->page = Pages::findByHref($href)->one();
        $actionName = 'action' . str_replace(' ', '', ucwords(strtolower(str_replace('-', ' ', $href))));
        if (method_exists($this, $actionName)) return call_user_func([$this, $actionName], $this->page);

        $view_file = $this->getViewPath($href) . DIRECTORY_SEPARATOR . $href . ".php";
        if (file_exists($view_file)) return $this->render($href, ['model' => $this->page]);

        if (!$this->page) {
            throw new NotFoundHttpException('Page "' . $href . '" not found ', 404);
        }
        $parent = false;
        if ($this->page->parent_page > 0) {
            $parent = Pages::findOne(['id' => $this->page->parent_page, 'status' => WbpActiveRecord::STATUS_ACTIVE]);
        }
        return $this->render('generic-page', ['model' => $this->page, 'parent' => $parent]);
    }

    public function actionError()
    {
        $this->redirect(['index']);
        Yii::$app->end();
    }

    public function actionAbout()
    {
        $model=Pages::findByHref('about')->one();
        SEO::setByModel($model);

        $testimonials  = new ActiveDataProvider([
            'query' => Testimonials::find()->where(['status'=>1, 'featured'=>1])->orderBy('id'),
            'pagination'=> false,
        ]);

        return $this->render('about',['model'=>$model, 'testimonials' => $testimonials]);
    }

    public function actionContact()
    {
        $model=Pages::findByHref('contacts')->one();
        SEO::setByModel($model);

        $contact = new Contacts(['scenario' => Contacts::FRONTEND_ADD_SCENARIO]);
        if ($contact->load(Yii::$app->request->post())) {

            if ($contact->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
                return $this->redirect(['site/contact']);
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }

        return $this->render('contact', ['model' => $model, 'contact' => $contact]);
    }

    public function actionPartners()
    {

        $model=Pages::findByHref('partners')->one();
        SEO::setByModel($model);

        $dataProvider = new ActiveDataProvider([
            'query'         =>  Partners::find()->where(['status' => 1])->orderBy('sort'),
            'pagination'    =>  [
                'pageSize'  => 10,
            ],
        ]);

        return $this->render('partners', ['model' => $model, 'dataProvider'=>$dataProvider]);

    }

    public function actionSubscribe()
    {
        if ($this->modelSubscribe->load(\Yii::$app->request->post())
            && $this->modelSubscribe->validate()
        ) {
            $this->modelSubscribe->save();
            $model=$this->modelSubscribe;
            $message= \yii::t('app', 'Thank you for your subscription. If you would like to unsubscribe please click')." ".
                Html::a(\Yii::t('app', 'here'), ['site/unsubscribe','email' => $model->email,'hash' => $model->hash]).".";
            Yii::$app->session->setFlash('success', $message);
            return $this->redirect($this->modelSubscribe->return);
        }
        return $this->render(['site/index']);
    }

    public function actionUnsubscribe($email, $hash)
    {
        $model = Subscribe::find()
            ->where([
                'email' => $email,
                'hash' => $hash,
            ])
            ->one();
        if ($model) {
            $model->status = WbpActiveRecord::STATUS_DISABLED;
            $model->save();
            \Yii::$app->session->setFlash('success', \yii::t('app', 'You are unsubscribed').'.');
        }
        return $this->redirect(['site/index']);
    }

    public function actionSubmitForm()
    {

        $model = new Callback(['scenario' => Callback::FRONTEND_ADD_SCENARIO]);
        if($model->load(\Yii::$app->request->post()) && $model->validate()){
            if($model->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }
        return $this->redirect([Url::previous()]);
    }

    public function actionOrder()
    {
        $this->layout = 'empty';
        $model = new Orders(['scenario' => Orders::FRONTEND_ADD_SCENARIO]);
        if($model->load(\Yii::$app->request->post()) && $model->validate()){
            if($model->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с вами через 48 часов');
                return $this->redirect($model->return);
            } else {
                \Yii::$app->session->setFlash('error',  \Yii::t('app', 'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз'));
            }
        }
        return $this->render('order', ['model'=>$model]);
    }

    public function actionRequestForRent()
    {
//        $model=Pages::findByHref('application-for-rent')->one();
//        SEO::setByModel($model);

        $request = new Request();
        if ($request->load(Yii::$app->request->post())) {

            if ($request->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
                return $this->redirect(['/']);
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }

        return $this->render('request-for-rent', ['request' => $request]);
    }

    public function actionRequestForSale()
    {
//        $model=Pages::findByHref('application-for-rent')->one();
//        SEO::setByModel($model);

        $request = new Request();
        if ($request->load(Yii::$app->request->post())) {

            if ($request->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
                return $this->redirect(['/']);
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }

        return $this->render('request-for-sale', ['request' => $request]);
    }

    public function actionCanNotFind()
    {
        $request = new Request();
        if ($request->load(Yii::$app->request->post())) {

            if ($request->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
                return $this->redirect(['/']);
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }

        return $this->render('can-not-find', ['request' => $request]);
    }

    public function actionOrderPropertyManagment()
    {
        $model = new OrderPropertyManagment(['scenario' => OrderPropertyManagment::FRONTEND_ADD_SCENARIO]);
        if($model->load(\Yii::$app->request->post()) && $model->validate()){

            if($model->save()) {
                \Yii::$app->session->setFlash('success', 'Спасибо, мы свяжемся с Вами в течение 48 часов.');
            } else {
                \Yii::$app->session->setFlash('error',  'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз.');
            }
        }

        return $this->redirect(Yii::$app->request->post("OrderPropertyManagment")['return']);
    }



    ///////////////////////////////////////////////////////////
    public function actionMarkersJson()
    {

        $where = array(
            'status'=>1
        );

        $query=Adverts::find();
        $request = Yii::$app->request;
        if($request->isAjax || $request->post()){
            $city_id = $request->post('city');
            $price_from = $request->post('price-from');
            $price_to = $request->post('price-to');
            $area_from = $request->post('area-from');
            $area_to = $request->post('area-to');
            if($request->post('total_arrea_from')){$area_from = $request->post('total_arrea_from');}
            if($request->post('total_arrea_to')){$area_to = $request->post('total_arrea_to');}
            $rooms = $request->post('rooms');
            $cars = $request->post('cars');
            $category_id = $request->post('category');
            $object_id = $request->post('object');

            if($city_id){
                $where['city_id'] = $city_id;
            }
            if($category_id){
                $where['category_id'] = $category_id;
            }
            if($object_id){
                $where['object_type_id'] = $object_id;
            }
        }
        $model=Pages::findByHref('index')->one();
        SEO::setByModel($model);
        if(!$model) throw new NotFoundHttpException('Page not fount.');

        $query=$query->where($where);


        if(!empty($price_from)){$query->andWhere(['>=', 'price', $price_from]);}

        if(!empty($price_to)){$query->andWhere(['<=', 'price', $price_to]);}
        if(!empty($rooms)){

            $ids = \backend\modules\adverts\models\AdvertsParametrs::getAdvertsByIds($rooms, 2);

            if(!empty($ids)){
                $query->andWhere(['in', 'id', $ids]);
            }else{
                $query->andWhere(['in', 'id', -1]);
            }
        }
        if(!empty($cars)){

            $ids = \backend\modules\adverts\models\AdvertsParametrs::getAdvertsByIds($cars, 19);

            if(!empty($ids)){
                $query->andWhere(['in', 'id', $ids]);
            }else{
                $query->andWhere(['in', 'id', -1]);
            }
        }
        if(!empty($area_from) || !empty($area_to)){
            $ids = \backend\modules\adverts\models\AdvertsParametrs::getAdvertsByArea($area_from, $area_to);

            if(!empty($ids)){
//                    $ids = implode(',', $ids);
                $query->andWhere(['in', 'id', $ids]);
            }else{
                $query->andWhere(['in', 'id', -1]);
            }
        }
        $query=$query->orderBy(' id desc');

        // for googleMap
        $totaladverts = $query->all();
        $totaladverts_array = array();
        foreach($totaladverts as $key => $value){
            $images = array();
            foreach ($value->images as $img_index=>$img){
                $images[] = $img->getUrl(320, 320);
            }
            $totaladverts_array[] = array(
                'id'=>$value->id,
                'href'=>$value->getUrl(),
                'title'=>$value->title,
                'price'=>$value->price,
                'address'=>$value->address,
                'lat'=>$value->lat,
                'lng'=>$value->lng,
                'images'=>$images,
            );
        }

        $mapinfo['icon'] = "/images/map-marker-sprite.png";

        $adverts = array();
        foreach($totaladverts_array as $advert){
            foreach($advert as $key => $value){
                $advert[$key] = str_replace("\"", "", $advert[$key]);
                $advert[$key] = str_replace("'", "", $advert[$key]);
                $advert[$key] = str_replace("&quot;", "", $advert[$key]);
            }
            $adverts[] = $advert;
        }

        $mapinfo['adverts'] = $adverts;

        return json_encode($mapinfo);
    }
}
