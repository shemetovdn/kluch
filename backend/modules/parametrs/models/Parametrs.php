<?php
namespace backend\modules\parametrs\models;

use backend\models\Modules;
use common\models\UserData;
use common\models\WbpActiveRecord;
use backend\modules\parametrs\models\ParametrsValue;
use Yii;


/**
 * @property int $id
 * @property int $title
 * @property int $key
 * @property int $url
 */
class Parametrs extends WbpActiveRecord
{

    public static function tableName()
    {
        return '{{%parametrs}}';
    }
    public $value_ids;

    public function rules()
    {
        return [
            [['title', 'status', 'field_type_id'], 'safe'],
            [[ 'title', 'field_type_id'], 'required', 'on' => [self::ADMIN_ADD_SCENARIO]],
            [[ 'title', 'field_type_id'], 'required', 'on' => [self::ADMIN_EDIT_SCENARIO,self::ADMIN_ADD_SCENARIO]],
    ];
    }

    public function getUserData()
    {
        return $this->hasOne(UserData::className(), ['user_id' => 'id']);
    }

    public function attributeLabels()
    {
        return [
            'title' => \Yii::t('admin', 'Заголовок'),
            'status' => \Yii::t('admin', 'Статус'),
            'field_type_id' => \Yii::t('admin', 'Тип Параметра'),
        ];
    }

    public function getType()
    {
        return $this->hasOne(FieldType::className(), ['id' => 'field_type_id']);
    }
    public function getParametrValue()
    {
        return $this->hasMany(ParametrsValue::className(), ['parametr_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $params_values = Yii::$app->request->post('ParametrsValue')["field_value"];
if($params_values){
    foreach ($params_values as $key => $value){
        if(!empty($value)){
            if(!$value["id"]){
                $param_value =  new ParametrsValue();
            }else{
                $param_value = ParametrsValue::findOne($value["id"]);
            }
            if(!empty($value["value"])){
                $param_value->value = $value["value"];
                $param_value->parametr_id = $this->id;
                $param_value->save();
            }


        }

    }
}




        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getParametrById($id){

        $param = Parametrs::findOne($id);

        if($param->field_type_id == 1 || $param->field_type_id == 2){
            $pramValues = [];

            foreach ($param->parametrValue as $key => $value){
                $pramValues[$value["id"]] = $value["value"];
            }

            return $pramValues;
        }

    }

}
