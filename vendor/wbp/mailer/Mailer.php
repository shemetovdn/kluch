<?php
/**
 * Created by PhpStorm.
 * User: Pavel
 * Date: 2/12/2016
 * Time: 11:25
 */

namespace wbp\mailer;


use backend\modules\mailTemplates\models\MailTemplates;
use common\models\Config;

class Mailer extends \yii\swiftmailer\Mailer
{
    public $templateId;
    public $log;

    public function compose($view = null, array $params = [])
    {
        $this->templateId=NULL;
        return parent::compose($view, $params); // TODO: Change the autogenerated stub
    }

    public function setTemplate(MailTemplates $template,$replacements=[]){
        $this->templateId=$template->id;
        $message=$this->compose();

        $message
            ->setSubject(str_replace(array_keys($replacements),array_values($replacements),$template->subject))
            ->setHtmlBody(str_replace(array_keys($replacements),array_values($replacements),$template->text));
        return $message;
    }

    public function beforeSend($message)
    {
        $transport=$this->getTransport();

        $host=Config::getParameter('smtp_host');
        $port=Config::getParameter('smtp_port');
        $username=Config::getParameter('smtp_user');
        $password=Config::getParameter('smtp_password');
        $encryption=Config::getParameter('smtp_encryption');

        if($host)
            $transport->setHost($host);
        if($port)
            $transport->setPort($port);
        if($username)
            $transport->setUsername($username);
        if($password)
            $transport->setPassword($password);
        if($encryption)
            $transport->setEncryption($encryption);

//        var_dump($transport); exit();


        $this->mailLog($message);

        return parent::beforeSend($message);
    }

    public function mailLog($message){
        $log=new MailLog();
        $log->load([
            'from_email'=>array_keys((array)$message->getFrom())[0],
            'from_name'=>array_values((array)$message->getFrom())[0],
            'to_email'=>array_keys((array)$message->getTo())[0],
            'to_name'=>array_values((array)$message->getTo())[0],
            'subject'=>$message->getSubject(),
            'message'=>$message->getSwiftMessage()->getBody(),
            'template_id'=>$this->templateId,
            'raw'=>(string)$message->getSwiftMessage(),
            'sentUrl'=>\Yii::$app->request->url
        ],'');
        $log->save();
        $this->log=$log;
    }

    protected function sendMessage($message)
    {
        $result='';
        try{
            $result=parent::sendMessage($message);
        }catch(\Swift_TransportException $e){
            $this->log->result.="\n".$e->getMessage();
            $this->log->save();
        }catch(\Swift_DependencyException $e){
            $this->log->result.="\n".$e->getMessage();
            $this->log->save();
        }catch(\Swift_IoException $e){
            $this->log->result.="\n".$e->getMessage();
            $this->log->save();
        }catch(\Swift_RfcComplianceException $e){
            $this->log->result.="\n".$e->getMessage();
            $this->log->save();
        }
        return $result;
    }
}
